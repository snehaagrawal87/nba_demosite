import pandas as pd
library(dplyr)
import pandas as pd
library(readr)
nba_data <- read_csv("C:/Statistics/nba.csv")
library(dplyr)
library(ggplot2)
top_gmsc <- nba_data %>%
arrange(desc(GmSc)) %>%
slice_head(n = 10)
ggplot(top_gmsc, aes(x = reorder(Player, GmSc), y = GmSc, fill = Player)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Top 10 NBA Performances by Game Score",
x = "Player", y = "Game Score (GmSc)") +
theme_minimal()
library(readr)
nba_data <- read_csv("C:/Statistics/nba.csv")
library(dplyr)
library(ggplot2)
top_gmsc <- nba_data %>%
arrange(desc(GmSc)) %>%
slice_head(n = 10)
ggplot(top_gmsc, aes(x = reorder(bbrId, GmSc), y = GmSc, fill = bbrId)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Top 10 NBA Performances by Game Score",
x = "Player (ID)", y = "Game Score (GmSc)") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readr)
library(car)
library(GGally)
library(ggplot2)
library(dplyr)
library(readr)
#library(car)
library(GGally)
nba_data <- read_csv("C:/Statistics/nba.csv")
str(nba_data)
summary(nba_data)
nba_data$Playoffs <- as.factor(nba_data$Playoffs)
nba_data$Season <- as.factor(nba_data$Season)
nba_data <- nba_data %>%
filter(!is.na(PTS), !is.na(AST), !is.na(TRB), !is.na(STL), !is.na(FT.))  # Remove rows with NA in key variables
# Clean dataset with relevant columns only (remove rows with missing values)
nba_data_clean <- nba_data %>%
filter(!is.na(PTS), !is.na(AST), !is.na(TRB), !is.na(STL), !is.na(BLK), !is.na(GmSc))
# Fit a linear regression model with more predictors
lm_extended <- lm(PTS ~ AST + TRB + STL + BLK + GmSc, data = nba_data_clean)
summary(lm_extended)
# Histogram of Points per Game
ggplot(nba_data, aes(x = PTS)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Points per Game", x = "Points", y = "Frequency")
# Boxplot of Points by Playoff Status
ggplot(nba_data, aes(x = Playoffs, y = PTS, fill = Playoffs)) +
geom_boxplot() +
labs(title = "Points by Playoff Status", y = "Points", x = "Playoffs")
# Correlation Matrix
numeric_vars <- nba_data %>% select(PTS, AST, TRB, STL, GmSc, TOV)
# Histogram of Points per Game
ggplot(nba_data, aes(x = PTS)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Points per Game", x = "Points", y = "Frequency")
# Boxplot of Points by Playoff Status
ggplot(nba_data, aes(x = Playoffs, y = PTS, fill = Playoffs)) +
geom_boxplot() +
labs(title = "Points by Playoff Status", y = "Points", x = "Playoffs")
library(ggplot2)
library(dplyr)
library(readr)
#library(car)
library(GGally)
nba_data <- read_csv("C:/Statistics/nba.csv")
str(nba_data)
summary(nba_data)
# Convert necessary columns to factors
nba_data$Playoffs <- as.factor(nba_data$Playoffs)
nba_data$Season <- as.factor(nba_data$Season)
# Remove rows with missing values in key predictor/response variables
nba_data_clean <- nba_data %>%
filter(!is.na(PTS), !is.na(AST), !is.na(TRB), !is.na(STL), !is.na(BLK), !is.na(GmSc))
# Histogram of Points per Game
ggplot(nba_data_clean, aes(x = PTS)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Points per Game", x = "Points", y = "Frequency")
# Boxplot of Points by Playoff Status
ggplot(nba_data_clean, aes(x = Playoffs, y = PTS, fill = Playoffs)) +
geom_boxplot() +
labs(title = "Points by Playoff Status", y = "Points", x = "Playoffs")
# Fit a multiple linear regression model for VIF check
vif_model <- lm(PTS ~ AST + TRB + STL + BLK + GmSc, data = nba_data_clean)
vif(vif_model)
# Build a linear regression model to predict Points per Game
lm_model <- lm(PTS ~ AST + TRB + STL + BLK + GmSc, data = nba_data_clean)
summary(lm_model)
par(mfrow = c(2,2))  # Arrange plots
plot(lm_model)  # Residuals vs Fitted, Q-Q Plot, Scale-Location, Residuals vs Leverage
# Confidence Interval for AST coefficient
confint(lm_model, "AST", level = 0.95)
library(ggplot2)
library(dplyr)
library(readr)
library(car)
library(GGally)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(lubridate)
library(forecast)
# Create a cleaned Date + PTS dataframe
nba_clean <- nba_daily %>%
filter(!is.na(Date) & !is.na(PTS)) %>%
mutate(Date = as.Date(Date)) %>%
select(Date, PTS)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(stats)
library(pwr)  # For power analysis
# Load dataset
nba_data <- read.csv("C:/Statistics/nba.csv")
# View structure of dataset
str(nba_data)
# Compute required sample size
effect_size <- 0.5  # Moderate effect size
power <- 0.8  # Standard power level
alpha <- 0.05  # Standard significance level
sample_size <- pwr.t.test(d = effect_size, power = power, sig.level = alpha, type = "two.sample", alternative = "two.sided")$n
print(sample_size)
# Ensure necessary columns exist
nba_data <- nba_data %>% filter(!is.na(GmSc) & !is.na(Playoffs))
# Separate groups
playoff_gmsc <- nba_data %>% filter(Playoffs == 1) %>% pull(GmSc)
non_playoff_gmsc <- nba_data %>% filter(Playoffs == 0) %>% pull(GmSc)
# Compare actual sample sizes to required sample size
actual_sample_playoff <- length(playoff_gmsc)
actual_sample_non_playoff <- length(non_playoff_gmsc)
sufficient_data <- actual_sample_playoff >= sample_size & actual_sample_non_playoff >= sample_size
sufficient_data
if (sufficient_data) {
hyp1_test <- t.test(playoff_gmsc, non_playoff_gmsc, var.equal = FALSE)
print(hyp1_test)
} else {
print("Not enough data to perform hypothesis test. Consider increasing sample size.")
}
ggplot(nba_data, aes(x = factor(Playoffs), y = GmSc, fill = factor(Playoffs))) +
geom_boxplot() +
labs(title = "Game Score (GmSc) Distribution by Playoff Status",
x = "Playoff Participation (0 = No, 1 = Yes)",
y = "Game Score (GmSc)") +
theme_minimal()
# Ensure necessary columns exist
nba_data <- nba_data %>% filter(!is.na(TRB) & !is.na(PTS))
# Perform Pearson correlation test
hyp2_test <- cor.test(nba_data$TRB, nba_data$PTS, method = "pearson")
print(hyp2_test)
# Fisher transformation
r <- hyp2_test$estimate
n <- nrow(nba_data)
z <- 0.5 * log((1 + r) / (1 - r))  # Fisher z transformation
se_z <- 1 / sqrt(n - 3)
z_score <- z / se_z
p_value_fisher <- 2 * (1 - pnorm(abs(z_score)))
cat("Fisher z-score:", z_score, "\n")
cat("Fisher p-value:", p_value_fisher, "\n")
ggplot(nba_data, aes(x = TRB, y = PTS)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = "Correlation Between Total Rebounds and Points Scored",
x = "Total Rebounds (TRB)",
y = "Points Scored (PTS)") +
theme_minimal()
library(readr)
nba_data <- read_csv("C:/Statistics/nba.csv")
ggplot(nba_data, aes(x = factor(Playoffs), y = GmSc, fill = factor(Playoffs))) +
geom_boxplot() +
labs(title = "Game Score (GmSc) Distribution by Playoff Status",
x = "Playoff Participation (0 = No, 1 = Yes)",
y = "Game Score (GmSc)") +
theme_minimal()
ggplot(nba_data, aes(x = TRB, y = PTS)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Correlation Between Total Rebounds and Points Scored",
x = "Total Rebounds (TRB)",
y = "Points Scored (PTS)") +
theme_minimal()
library(readr)
nba_data <- read_csv("C:/Statistics/nba.csv")
ggplot(nba_data, aes(x = factor(Playoffs), y = GmSc, fill = factor(Playoffs))) +
geom_boxplot() +
labs(title = "Game Score (GmSc) Distribution by Playoff Status",
x = "Playoff Participation (0 = No, 1 = Yes)",
y = "Game Score (GmSc)") +
theme_minimal()
ggplot(nba_data, aes(x = TRB, y = PTS)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Correlation Between Total Rebounds and Points Scored",
x = "Total Rebounds (TRB)",
y = "Points Scored (PTS)") +
theme_minimal()
library(readr)
library(ggplot2)
nba_data <- read_csv("C:/Statistics/nba.csv")
ggplot(nba_data, aes(x = factor(Playoffs), y = GmSc, fill = factor(Playoffs))) +
geom_boxplot() +
labs(title = "Game Score (GmSc) Distribution by Playoff Status",
x = "Playoff Participation (0 = No, 1 = Yes)",
y = "Game Score (GmSc)") +
theme_minimal()
